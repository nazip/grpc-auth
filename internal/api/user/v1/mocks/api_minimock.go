package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/nazip/grpc-auth/internal/api/user/v1.API -o ./mocks/api_minimock.go -n APIMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	desc "github.com/nazip/grpc-auth/pkg/user_v1"
	"google.golang.org/protobuf/types/known/emptypb"
)

// APIMock implements v1.API
type APIMock struct {
	t minimock.Tester

	funcCreate          func(ctx context.Context, req *desc.CreateRequest) (cp1 *desc.CreateResponse, err error)
	inspectFuncCreate   func(ctx context.Context, req *desc.CreateRequest)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mAPIMockCreate

	funcDelete          func(ctx context.Context, req *desc.DeleteRequest) (ep1 *emptypb.Empty, err error)
	inspectFuncDelete   func(ctx context.Context, req *desc.DeleteRequest)
	afterDeleteCounter  uint64
	beforeDeleteCounter uint64
	DeleteMock          mAPIMockDelete

	funcGet          func(ctx context.Context, req *desc.GetRequest) (gp1 *desc.GetResponse, err error)
	inspectFuncGet   func(ctx context.Context, req *desc.GetRequest)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mAPIMockGet

	funcUpdate          func(ctx context.Context, req *desc.UpdateRequest) (ep1 *emptypb.Empty, err error)
	inspectFuncUpdate   func(ctx context.Context, req *desc.UpdateRequest)
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mAPIMockUpdate
}

// NewAPIMock returns a mock for v1.API
func NewAPIMock(t minimock.Tester) *APIMock {
	m := &APIMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mAPIMockCreate{mock: m}
	m.CreateMock.callArgs = []*APIMockCreateParams{}

	m.DeleteMock = mAPIMockDelete{mock: m}
	m.DeleteMock.callArgs = []*APIMockDeleteParams{}

	m.GetMock = mAPIMockGet{mock: m}
	m.GetMock.callArgs = []*APIMockGetParams{}

	m.UpdateMock = mAPIMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*APIMockUpdateParams{}

	return m
}

type mAPIMockCreate struct {
	mock               *APIMock
	defaultExpectation *APIMockCreateExpectation
	expectations       []*APIMockCreateExpectation

	callArgs []*APIMockCreateParams
	mutex    sync.RWMutex
}

// APIMockCreateExpectation specifies expectation struct of the API.Create
type APIMockCreateExpectation struct {
	mock    *APIMock
	params  *APIMockCreateParams
	results *APIMockCreateResults
	Counter uint64
}

// APIMockCreateParams contains parameters of the API.Create
type APIMockCreateParams struct {
	ctx context.Context
	req *desc.CreateRequest
}

// APIMockCreateResults contains results of the API.Create
type APIMockCreateResults struct {
	cp1 *desc.CreateResponse
	err error
}

// Expect sets up expected params for API.Create
func (mmCreate *mAPIMockCreate) Expect(ctx context.Context, req *desc.CreateRequest) *mAPIMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("APIMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &APIMockCreateExpectation{}
	}

	mmCreate.defaultExpectation.params = &APIMockCreateParams{ctx, req}
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the API.Create
func (mmCreate *mAPIMockCreate) Inspect(f func(ctx context.Context, req *desc.CreateRequest)) *mAPIMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for APIMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by API.Create
func (mmCreate *mAPIMockCreate) Return(cp1 *desc.CreateResponse, err error) *APIMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("APIMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &APIMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &APIMockCreateResults{cp1, err}
	return mmCreate.mock
}

// Set uses given function f to mock the API.Create method
func (mmCreate *mAPIMockCreate) Set(f func(ctx context.Context, req *desc.CreateRequest) (cp1 *desc.CreateResponse, err error)) *APIMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the API.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the API.Create method")
	}

	mmCreate.mock.funcCreate = f
	return mmCreate.mock
}

// When sets expectation for the API.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mAPIMockCreate) When(ctx context.Context, req *desc.CreateRequest) *APIMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("APIMock.Create mock is already set by Set")
	}

	expectation := &APIMockCreateExpectation{
		mock:   mmCreate.mock,
		params: &APIMockCreateParams{ctx, req},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up API.Create return parameters for the expectation previously defined by the When method
func (e *APIMockCreateExpectation) Then(cp1 *desc.CreateResponse, err error) *APIMock {
	e.results = &APIMockCreateResults{cp1, err}
	return e.mock
}

// Create implements v1.API
func (mmCreate *APIMock) Create(ctx context.Context, req *desc.CreateRequest) (cp1 *desc.CreateResponse, err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, req)
	}

	mm_params := &APIMockCreateParams{ctx, req}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_got := APIMockCreateParams{ctx, req}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("APIMock.Create got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the APIMock.Create")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, req)
	}
	mmCreate.t.Fatalf("Unexpected call to APIMock.Create. %v %v", ctx, req)
	return
}

// CreateAfterCounter returns a count of finished APIMock.Create invocations
func (mmCreate *APIMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of APIMock.Create invocations
func (mmCreate *APIMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to APIMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mAPIMockCreate) Calls() []*APIMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*APIMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *APIMock) MinimockCreateDone() bool {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateInspect logs each unmet expectation
func (m *APIMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to APIMock.Create with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to APIMock.Create")
		} else {
			m.t.Errorf("Expected call to APIMock.Create with params: %#v", *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		m.t.Error("Expected call to APIMock.Create")
	}
}

type mAPIMockDelete struct {
	mock               *APIMock
	defaultExpectation *APIMockDeleteExpectation
	expectations       []*APIMockDeleteExpectation

	callArgs []*APIMockDeleteParams
	mutex    sync.RWMutex
}

// APIMockDeleteExpectation specifies expectation struct of the API.Delete
type APIMockDeleteExpectation struct {
	mock    *APIMock
	params  *APIMockDeleteParams
	results *APIMockDeleteResults
	Counter uint64
}

// APIMockDeleteParams contains parameters of the API.Delete
type APIMockDeleteParams struct {
	ctx context.Context
	req *desc.DeleteRequest
}

// APIMockDeleteResults contains results of the API.Delete
type APIMockDeleteResults struct {
	ep1 *emptypb.Empty
	err error
}

// Expect sets up expected params for API.Delete
func (mmDelete *mAPIMockDelete) Expect(ctx context.Context, req *desc.DeleteRequest) *mAPIMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("APIMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &APIMockDeleteExpectation{}
	}

	mmDelete.defaultExpectation.params = &APIMockDeleteParams{ctx, req}
	for _, e := range mmDelete.expectations {
		if minimock.Equal(e.params, mmDelete.defaultExpectation.params) {
			mmDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDelete.defaultExpectation.params)
		}
	}

	return mmDelete
}

// Inspect accepts an inspector function that has same arguments as the API.Delete
func (mmDelete *mAPIMockDelete) Inspect(f func(ctx context.Context, req *desc.DeleteRequest)) *mAPIMockDelete {
	if mmDelete.mock.inspectFuncDelete != nil {
		mmDelete.mock.t.Fatalf("Inspect function is already set for APIMock.Delete")
	}

	mmDelete.mock.inspectFuncDelete = f

	return mmDelete
}

// Return sets up results that will be returned by API.Delete
func (mmDelete *mAPIMockDelete) Return(ep1 *emptypb.Empty, err error) *APIMock {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("APIMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &APIMockDeleteExpectation{mock: mmDelete.mock}
	}
	mmDelete.defaultExpectation.results = &APIMockDeleteResults{ep1, err}
	return mmDelete.mock
}

// Set uses given function f to mock the API.Delete method
func (mmDelete *mAPIMockDelete) Set(f func(ctx context.Context, req *desc.DeleteRequest) (ep1 *emptypb.Empty, err error)) *APIMock {
	if mmDelete.defaultExpectation != nil {
		mmDelete.mock.t.Fatalf("Default expectation is already set for the API.Delete method")
	}

	if len(mmDelete.expectations) > 0 {
		mmDelete.mock.t.Fatalf("Some expectations are already set for the API.Delete method")
	}

	mmDelete.mock.funcDelete = f
	return mmDelete.mock
}

// When sets expectation for the API.Delete which will trigger the result defined by the following
// Then helper
func (mmDelete *mAPIMockDelete) When(ctx context.Context, req *desc.DeleteRequest) *APIMockDeleteExpectation {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("APIMock.Delete mock is already set by Set")
	}

	expectation := &APIMockDeleteExpectation{
		mock:   mmDelete.mock,
		params: &APIMockDeleteParams{ctx, req},
	}
	mmDelete.expectations = append(mmDelete.expectations, expectation)
	return expectation
}

// Then sets up API.Delete return parameters for the expectation previously defined by the When method
func (e *APIMockDeleteExpectation) Then(ep1 *emptypb.Empty, err error) *APIMock {
	e.results = &APIMockDeleteResults{ep1, err}
	return e.mock
}

// Delete implements v1.API
func (mmDelete *APIMock) Delete(ctx context.Context, req *desc.DeleteRequest) (ep1 *emptypb.Empty, err error) {
	mm_atomic.AddUint64(&mmDelete.beforeDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmDelete.afterDeleteCounter, 1)

	if mmDelete.inspectFuncDelete != nil {
		mmDelete.inspectFuncDelete(ctx, req)
	}

	mm_params := &APIMockDeleteParams{ctx, req}

	// Record call args
	mmDelete.DeleteMock.mutex.Lock()
	mmDelete.DeleteMock.callArgs = append(mmDelete.DeleteMock.callArgs, mm_params)
	mmDelete.DeleteMock.mutex.Unlock()

	for _, e := range mmDelete.DeleteMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ep1, e.results.err
		}
	}

	if mmDelete.DeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDelete.DeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmDelete.DeleteMock.defaultExpectation.params
		mm_got := APIMockDeleteParams{ctx, req}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDelete.t.Errorf("APIMock.Delete got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDelete.DeleteMock.defaultExpectation.results
		if mm_results == nil {
			mmDelete.t.Fatal("No results are set for the APIMock.Delete")
		}
		return (*mm_results).ep1, (*mm_results).err
	}
	if mmDelete.funcDelete != nil {
		return mmDelete.funcDelete(ctx, req)
	}
	mmDelete.t.Fatalf("Unexpected call to APIMock.Delete. %v %v", ctx, req)
	return
}

// DeleteAfterCounter returns a count of finished APIMock.Delete invocations
func (mmDelete *APIMock) DeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.afterDeleteCounter)
}

// DeleteBeforeCounter returns a count of APIMock.Delete invocations
func (mmDelete *APIMock) DeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.beforeDeleteCounter)
}

// Calls returns a list of arguments used in each call to APIMock.Delete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDelete *mAPIMockDelete) Calls() []*APIMockDeleteParams {
	mmDelete.mutex.RLock()

	argCopy := make([]*APIMockDeleteParams, len(mmDelete.callArgs))
	copy(argCopy, mmDelete.callArgs)

	mmDelete.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteDone returns true if the count of the Delete invocations corresponds
// the number of defined expectations
func (m *APIMock) MinimockDeleteDone() bool {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeleteInspect logs each unmet expectation
func (m *APIMock) MinimockDeleteInspect() {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to APIMock.Delete with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		if m.DeleteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to APIMock.Delete")
		} else {
			m.t.Errorf("Expected call to APIMock.Delete with params: %#v", *m.DeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		m.t.Error("Expected call to APIMock.Delete")
	}
}

type mAPIMockGet struct {
	mock               *APIMock
	defaultExpectation *APIMockGetExpectation
	expectations       []*APIMockGetExpectation

	callArgs []*APIMockGetParams
	mutex    sync.RWMutex
}

// APIMockGetExpectation specifies expectation struct of the API.Get
type APIMockGetExpectation struct {
	mock    *APIMock
	params  *APIMockGetParams
	results *APIMockGetResults
	Counter uint64
}

// APIMockGetParams contains parameters of the API.Get
type APIMockGetParams struct {
	ctx context.Context
	req *desc.GetRequest
}

// APIMockGetResults contains results of the API.Get
type APIMockGetResults struct {
	gp1 *desc.GetResponse
	err error
}

// Expect sets up expected params for API.Get
func (mmGet *mAPIMockGet) Expect(ctx context.Context, req *desc.GetRequest) *mAPIMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("APIMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &APIMockGetExpectation{}
	}

	mmGet.defaultExpectation.params = &APIMockGetParams{ctx, req}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the API.Get
func (mmGet *mAPIMockGet) Inspect(f func(ctx context.Context, req *desc.GetRequest)) *mAPIMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for APIMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by API.Get
func (mmGet *mAPIMockGet) Return(gp1 *desc.GetResponse, err error) *APIMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("APIMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &APIMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &APIMockGetResults{gp1, err}
	return mmGet.mock
}

// Set uses given function f to mock the API.Get method
func (mmGet *mAPIMockGet) Set(f func(ctx context.Context, req *desc.GetRequest) (gp1 *desc.GetResponse, err error)) *APIMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the API.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the API.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the API.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mAPIMockGet) When(ctx context.Context, req *desc.GetRequest) *APIMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("APIMock.Get mock is already set by Set")
	}

	expectation := &APIMockGetExpectation{
		mock:   mmGet.mock,
		params: &APIMockGetParams{ctx, req},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up API.Get return parameters for the expectation previously defined by the When method
func (e *APIMockGetExpectation) Then(gp1 *desc.GetResponse, err error) *APIMock {
	e.results = &APIMockGetResults{gp1, err}
	return e.mock
}

// Get implements v1.API
func (mmGet *APIMock) Get(ctx context.Context, req *desc.GetRequest) (gp1 *desc.GetResponse, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, req)
	}

	mm_params := &APIMockGetParams{ctx, req}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.gp1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_got := APIMockGetParams{ctx, req}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("APIMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the APIMock.Get")
		}
		return (*mm_results).gp1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, req)
	}
	mmGet.t.Fatalf("Unexpected call to APIMock.Get. %v %v", ctx, req)
	return
}

// GetAfterCounter returns a count of finished APIMock.Get invocations
func (mmGet *APIMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of APIMock.Get invocations
func (mmGet *APIMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to APIMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mAPIMockGet) Calls() []*APIMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*APIMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *APIMock) MinimockGetDone() bool {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetInspect logs each unmet expectation
func (m *APIMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to APIMock.Get with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to APIMock.Get")
		} else {
			m.t.Errorf("Expected call to APIMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		m.t.Error("Expected call to APIMock.Get")
	}
}

type mAPIMockUpdate struct {
	mock               *APIMock
	defaultExpectation *APIMockUpdateExpectation
	expectations       []*APIMockUpdateExpectation

	callArgs []*APIMockUpdateParams
	mutex    sync.RWMutex
}

// APIMockUpdateExpectation specifies expectation struct of the API.Update
type APIMockUpdateExpectation struct {
	mock    *APIMock
	params  *APIMockUpdateParams
	results *APIMockUpdateResults
	Counter uint64
}

// APIMockUpdateParams contains parameters of the API.Update
type APIMockUpdateParams struct {
	ctx context.Context
	req *desc.UpdateRequest
}

// APIMockUpdateResults contains results of the API.Update
type APIMockUpdateResults struct {
	ep1 *emptypb.Empty
	err error
}

// Expect sets up expected params for API.Update
func (mmUpdate *mAPIMockUpdate) Expect(ctx context.Context, req *desc.UpdateRequest) *mAPIMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("APIMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &APIMockUpdateExpectation{}
	}

	mmUpdate.defaultExpectation.params = &APIMockUpdateParams{ctx, req}
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the API.Update
func (mmUpdate *mAPIMockUpdate) Inspect(f func(ctx context.Context, req *desc.UpdateRequest)) *mAPIMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for APIMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by API.Update
func (mmUpdate *mAPIMockUpdate) Return(ep1 *emptypb.Empty, err error) *APIMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("APIMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &APIMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &APIMockUpdateResults{ep1, err}
	return mmUpdate.mock
}

// Set uses given function f to mock the API.Update method
func (mmUpdate *mAPIMockUpdate) Set(f func(ctx context.Context, req *desc.UpdateRequest) (ep1 *emptypb.Empty, err error)) *APIMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the API.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the API.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	return mmUpdate.mock
}

// When sets expectation for the API.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mAPIMockUpdate) When(ctx context.Context, req *desc.UpdateRequest) *APIMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("APIMock.Update mock is already set by Set")
	}

	expectation := &APIMockUpdateExpectation{
		mock:   mmUpdate.mock,
		params: &APIMockUpdateParams{ctx, req},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up API.Update return parameters for the expectation previously defined by the When method
func (e *APIMockUpdateExpectation) Then(ep1 *emptypb.Empty, err error) *APIMock {
	e.results = &APIMockUpdateResults{ep1, err}
	return e.mock
}

// Update implements v1.API
func (mmUpdate *APIMock) Update(ctx context.Context, req *desc.UpdateRequest) (ep1 *emptypb.Empty, err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, req)
	}

	mm_params := &APIMockUpdateParams{ctx, req}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ep1, e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_got := APIMockUpdateParams{ctx, req}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("APIMock.Update got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the APIMock.Update")
		}
		return (*mm_results).ep1, (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, req)
	}
	mmUpdate.t.Fatalf("Unexpected call to APIMock.Update. %v %v", ctx, req)
	return
}

// UpdateAfterCounter returns a count of finished APIMock.Update invocations
func (mmUpdate *APIMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of APIMock.Update invocations
func (mmUpdate *APIMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to APIMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mAPIMockUpdate) Calls() []*APIMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*APIMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *APIMock) MinimockUpdateDone() bool {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateInspect logs each unmet expectation
func (m *APIMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to APIMock.Update with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to APIMock.Update")
		} else {
			m.t.Errorf("Expected call to APIMock.Update with params: %#v", *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		m.t.Error("Expected call to APIMock.Update")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *APIMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateInspect()

		m.MinimockDeleteInspect()

		m.MinimockGetInspect()

		m.MinimockUpdateInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *APIMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *APIMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockDeleteDone() &&
		m.MinimockGetDone() &&
		m.MinimockUpdateDone()
}
